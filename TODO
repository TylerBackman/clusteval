* Next Actions
** TODO Write a Rhipe version of 'boot' (i.e. 'boot_rhipe').
** TODO Add PIC option to simulation code
** TODO Run small PIC sim and ensure results match the same for same sim on martingale
** TODO Run 'clustomit' sim results
** TODO Create summary graphics of 'clustomit' sim results
** TODO Write summaries of simulation results
** TODO Add summaries to main document
** TODO Add summary code (i.e. code for graphics and tables) to main document via 'knitr'
** TODO Derive Jaccard COS statistic for cluster omission
** TODO Discuss estimation of Jaccard COS statistic as MLE, citing Fligner and Verducci (2002)
** TODO Run gap statistic on the data sets
*** Cite Izenman
*** Izenman has said that the gap statistic may overestimate K.
** TODO Add the Silhouette method as a diagnostic test
** TODO Change a portion of the paper to a "diagnostic discovery" paper

Show how ClustOmit is useful when performing a cluster analysis

*** Cite Handl et al. for the idea

*** If the idea ultimately does not fit the paper, write a tutorial paper that shows how to use clustering evaluation in practice.

Perhaps, a tutorial paper is warranted and would be widely cited.

** TODO Download the LaTeX template for Bioinformatics
** TODO Create Bioinformatics version of paper with their LaTeX template
** TODO Email rough draft to Landon and Dr. Young along with Bioinformatics version of paper
** TODO Add package level documentation to clustomit
** TODO Add data sets for each data set in the package:
*** St. Jude
*** SRBCT
** TODO Add documentation for each data set in clustomit:

For an example, see:
https://github.com/hadley/devtools/wiki/docs-function

*** St. Jude
***  - SRBCT
** TODO Determine SimConfig for Multivariate Gamma data
** TODO Implement Multivariate Gamma function to generate data

* ClustOmit SimDesign for Testing

J = Jaccard
CR = Completely Random with equal a priori probabilities
COS = Cluster Omission Stability statistic

** TODO For each SimDesign, manually calculate:
    E_CR[COS] = 1/(M-1) (?)
    V_CR[COS] = ?
** TODO For each simulation, check that the average simulated COS score is very close to the E_CR[COS]
    By close, I mean with 3 standard deviations

* Clustering Wrappers
** Determine the common items that each clustering algorithm should return

Obviously, the cluster labels should be returned. But there should be some conditional items that should be returned, such
as cluster membership posterior probabilities if available (fuzzy labels). Obviously, there will be the actual object returned
by the clustering algorithm. Because this can be quite large, this should only be stored if the user sets the flag to do so.
By default, this should be stored, so that out of the box, things are handled as expected. But this should be turned off
because the storage can be quite overwhelming for a large number of clustering algorithms and/or large data sets.

See the 'caret' package for a lookup table of available features for each clustering algorithm.

** TODO Create the frontend function for clustering
** TODO Create kmeans wrapper
** TODO Add kmeans unit test with iris data set for a variety of values of K
For a fixed RNG seed, the cluster labels should be the same using the wrapper and the original method. 
** TODO Create diana wrapper
** TODO Add diana unit test with iris data set for a variety of values of K
For a fixed RNG seed, the cluster labels should be the same using the wrapper and the original method. 
** TODO Create PAM wrapper
** TODO Add PAM unit test with iris data set for a variety of values of K
For a fixed RNG seed, the cluster labels should be the same using the wrapper and the original method. 

** TODO Create mclust wrapper
** TODO Add mclust unit test with iris data set for a variety of values of K
For a fixed RNG seed, the cluster labels should be the same using the wrapper and the original method. 

** TODO Create lookup table for common elements
* Maybe/Someday
** Write Rcpp version of similarity functions
** TODO Finish Unit Test #2 for consensus clustering                   :pnnl:
** Implement improved version of FOM
** Create a MapReduce or GPU version of major clustering algorithms
** Add hpc = T/F option. If TRUE, use a better method than the built-in method.  
