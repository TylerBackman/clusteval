Implement functions to generate from each family of distributions:
  - Multivariate Student's t
  - Multivariate Gamma
Write implementation code for FOM, clusterboot, and clustomit for each family of distributions:
  - Bivariate Uniform
  - Multivariate Normal
  - Multivariate Student's t
  - Multivariate Gamma
Create graphical outputs for each of FOM, clusterboot, and clustomit for each family of distributions:
  - Bivariate Uniform
  - Multivariate Normal
  - Multivariate Student's t
  - Multivariate Gamma
Add package level documentation to clustomit
Add documentation for each data set in clustomit:
  - St. Jude
  - SRBCT
  - For an example, see:
    - https://github.com/hadley/devtools/wiki/docs-function
Copy and paste sim writeups and graphical figure code to webnotebook
Now, go back and update the Jaccard scores for each method and use weighted average of Jaccard scores
  Weights are sample sizes of each cluster
Add 'clusteval' package to PNNL's version of the CRAN repository
Rename 'clustomit' on github to 'clusteval' and push the latest changes
Add error checking for positive sample sizes to:
  - Bivariate Uniform
  - Multivariate Normal
  - Multivariate Student's t
  - Multivariate Gamma
Add unit test to check the errors for each of:
  - Bivariate Uniform
  - Multivariate Normal
  - Multivariate Student's t
  - Multivariate Gamma
Add unit test to verify proper output of:
  - Bivariate Uniform
  - Multivariate Normal
  - Multivariate Student's t
  - Multivariate Gamma







Ensure that the licensing for 'mclust' does not create an issue with our R package.
Add/update data-microarray with data sets
Summarize data graphically
	Handle NAs
It would be useful to consider an external validation approach here as well.
	Rather than using a clustering method to get the truth, use the true, external
	labels to see how well the method could match it.
Consider using 'clara' as a clustering method. To quote Hennig's documentation,
	"PAM is better, CLARA is faster"
	If this is true, then CLARA may yield results that we can criticize.
Add bootstrap_type argument to clustomit_landon
	Should be in: c("nonparametric, parametric")
	If nonparametric, use what we already have. with_replacement only affects this.
	If parametric, use the method in section 3.3 in Hennig
		An additional argument should be added to clustomit_landon that is a RNG function that matches the
			criteria in 'boot'
		If it is NULL, we use the one in Hennig.
		This should allow additional support for other types of parametric bootstrapping/jittering
			such as the one we used in the original paper.
Add more documentation to clustomit_boot
Add documentation to helper functions.
Make sure the WARNINGS being thrown by the similarity functions is not critical.
	Fix it, if possible.
	
